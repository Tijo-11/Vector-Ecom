"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta
#timedelta represents a duration, the difference between two dates or times.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-uq)3&7se87@l!4$10p&9qwwh*k$w55mwff3hp6tw8)otf9ye@m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third Party Apps
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'drf_yasg',
    # Custom Apps
    'userauth',
    'store',
    'vendor',
    'customer',
    'addon',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DATABASE_NAME'),
        'USER': config('DATABASE_USER'),
        'PASSWORD': config('DATABASE_PASSWORD'),
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/' #URL prefix for serving static files like CSS, JS, and images.
STATICFILES_DIRS = [BASE_DIR / 'static'] #Tells Django where to find additional static files during development.
STATIC_ROOT = BASE_DIR / 'staticfiles' #Directory where Django collects all static files for production (collectstatic
#Create folder staticfiles in the root directory, here inside project level backend
MEDIA_URL = 'media/' #URL prefix for serving uploaded media files (e.g. user images, documents).
MEDIA_ROOT = BASE_DIR / 'media' #Files uploaded by users are stored here on the server.


AUTH_USER_MODEL = 'userauth.User' #Note it is included as string



# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

JAZZMIN_SETTINGS = {
    "site_title":"RetroRelics",
    "site_header":"RetroRelics",
    "site_brand" : "RetroRelics", #Your destination for timeless treasures.",
    #"Shop stories, not just things", "Because memories never go out of style"
    "welcome_sign": "Welcome to RetroRelics",
    "copyright" : "Tijo Thomas 2025 All rights reserved",
    'show_ui_builder' :True,
    #https://django-jazzmin.readthedocs.io/ui_customisation/
}
SIMPLE_JWT= {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=50),
    'ROTATE_REFRESH_TOKENS' : True,
#'ROTATE_REFRESH_TOKENS': True ensures that a new refresh token is issued every time the user gets a new 
# access token using the old refresh token.This helps prevent token reuse and makes it easier to revoke 
# compromised tokens.
    'BLACKLIST_AFTER_ROTATION' :True,
#ensures that old refresh tokens are invalidated (blacklisted) after a new one is issued during rotation.
#This setting works hand-in-hand with 'ROTATE_REFRESH_TOKENS': True to enforce strict token hygieneâ€”making
# sure that once a refresh token is rotated, the previous one can't be used again. It's a smart move for apps
# that prioritize security and want to reduce the risk of token theft or replay attacks.
    'UPDATE_LAST_LOGIN' :True
#ensures that the user's last_login field is updated every time they log in, even if it's not their first time.
#This is useful for tracking user activity, monitoring engagement, or implementing features like login history,
# session analytics, or security alerts.
}
# Optional if you're using cookies with JWT
CORS_ALLOW_METHODS = ['GET', 'POST', 'OPTIONS','PUT', 'PATCH', 'DELETE']
CORS_ALLOW_HEADERS = [
    "X-CSRFToken",
    "Content-Type",
    "Authorization",
]
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",   # React dev server
]